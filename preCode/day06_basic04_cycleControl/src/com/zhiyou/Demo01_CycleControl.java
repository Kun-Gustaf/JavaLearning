package com.zhiyou;
//循环控制结构
public class Demo01_CycleControl {

    public static void main(String[] args) {
        /*
           循环结构：
               在满足某些条件下或者情况下，重复性的去执行一些代码，实现某个功能。
               三种基本循环结构语句：for while  fo-while
               语法结构：
                   通常包含四部分：1.初始化部分（声明或者定义一个需要循环的变量,通常使用int类型的整数）
                                2.循环条件部分（循环结束的条件表达式 布尔类型值true/false）
                                3.循环体部分（当条件满足时，程序需要加载的代码）
                                4.迭代部分（循环变量的变化情况--》往上递增/往下递减）
               第一个循环结构语句： for循环
                   语法结构：for(1初始化语句;2循环条件表达式;4迭代语句){
                               3循环体语句代码
                                .
                                .
                                .
                                .
                                .
                                .

                       }
                   执行过程：
                            1--》2--》3--》4--》2--》3--》4......-》2  直到程序结束
                            说明：1.当循环条件表达式的结果值为false,那么该循环语句结构就结束了。
                                 此时程序就跳出该循环结构，往下执行后面的代码。
                                 2.循环条件表达式需要关联前面的初始化声明的变量部分。
                                 3.每次执行到循环条件表达式时，都会重新判断该表达式的真假
                                    当该表达式为真的时候，执行循环语句结构中循环体代码
                                    当该表达式为假的时候，该循环语句结束，程序跳出该循环结构。
                                  4.查看该循环语句结构的循环次数(关键信息)。

         */
        //需求1：要求你在程序中输出10行文本信息"我很棒，我很优秀，我是最棒的！"
        for( int i = 0; i < 10 ; i++){//index -->索引
            System.out.println(i+" 我很棒，我很优秀，我是最棒的！");
        }
        /*
            执行过程：
                    int i = 0;--> i<10;-->System.out.println("我很棒，我很优秀，我是最棒的！");
                    -->i++; 此时 i=1 --> i<10;-->System.out.println("我很棒，我很优秀，我是最棒的！");
                    -->i++;此时i==2 --> i<10; -->......
                    -->i++; 此时i = 10; --> i<10;此时该表达时结果为false循环结构结束
             循环次数：0-->9 = 10次
         */
        //需求2：求一下前100个正整数的和。
        int sum=0;
        for(int i =1; i <= 100; i++){
            sum +=i; //累加之后赋给sum变量
        }
        //输出前100个正整数的和
        System.out.println("前100个正整数的和为:"+sum);
        //需求3：求一下前100项正整数中所有奇数的和
        sum = 0;
        for(int i =1 ; i<=100 ; i+=2){
            sum += i;
        }
        System.out.println("前100项正整数中所有奇数的和为："+sum);
        //需求4：求以下前100项正整数所有是7包含7的倍数的所有的整数的和
        sum = 0;
        for (int j =0; j<=100 ;j++){
            if(j % 7 ==0){
                sum += j;
            }
        }
        System.out.println("前100项正整数所有是7包含7的倍数的所有的整数的和为："+sum);
        //需求5：求一下三位数中的所有的水仙花数分别是多少，它们的和又是多少
        //      水仙花数：每个位上的立方和等于该数本身
        int a;
        int b;
        int c;
        int num;
        sum = 0;
        for (int k = 100 ; k < 1000 ; k++){
            a = k % 10;
            b = k /10 % 10;
            c = k / 100;
            num = a * a * a + b * b * b + c * c *c;
            if(k == num){
                System.out.println(k+"是水仙花数");
                sum += k;
            }
        }
        System.out.println("三位数中的所有的水仙花数和为："+sum);
        //需求6：求一下10的阶乘数 如 5! = 5 * 4 * 3 * 2 * 1 = 120;
        int product=1;
        for(int l = 10; l > 0; l--){
            product *= l;
        }
        System.out.println("10的阶乘数为："+product);
        /*System.out.println(10*9*8*7*6*5*4*3*2*1);*/
        //需求7：求一下[100，300]之间的能被5整除的所有数，每行输出8个数。

        int flag=0;
        for( int m = 100; m <= 300 ; m++){
            if(m % 5 == 0){
                System.out.print(m+" ");
                flag++;
                if(flag % 8 == 0){
                    System.out.println();
                }
            }
        }

        //需求8：输出1-10之间的数字，数字到8的时候跳过去
        /*
            跳出语句：break continue
            break:
                  中断，打断，停止，那就是让当前正在执行的循环语句结构(单层)停止，程序跳出该循环语句结构
            continue:
                 继续，执行到该跳出语句时，程序发生跳跃，但是没有跳出该循环语句结构，如果该循环语句结构中的
                 循环条件成立，那么程序会再次进入到该循环语句结构中，执行该循环语句结构中的循环体内容。
        */
        for(int i=1; i <= 10; i++){
            //判断i == 8
            if(i == 8){
                continue;
            }
            System.out.println(i);
        }

    }
}
